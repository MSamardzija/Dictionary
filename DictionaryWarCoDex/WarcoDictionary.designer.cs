#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DictionaryWarCoDex
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Dictionary")]
	public partial class WarcoDictionaryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDictionary(Dictionary instance);
    partial void UpdateDictionary(Dictionary instance);
    partial void DeleteDictionary(Dictionary instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertWord(Word instance);
    partial void UpdateWord(Word instance);
    partial void DeleteWord(Word instance);
    #endregion
		
		public WarcoDictionaryDataContext() : 
				base(global::DictionaryWarCoDex.Properties.Settings.Default.DictionaryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WarcoDictionaryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarcoDictionaryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarcoDictionaryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarcoDictionaryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dictionary> Dictionaries
		{
			get
			{
				return this.GetTable<Dictionary>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<EngSrbPackage> EngSrbPackages
		{
			get
			{
				return this.GetTable<EngSrbPackage>();
			}
		}
		
		public System.Data.Linq.Table<Word> Words
		{
			get
			{
				return this.GetTable<Word>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dictionary")]
	public partial class Dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DictionaryID;
		
		private string _DictionaryName;
		
		private System.DateTime _DateOfCreation;
		
		private int _UserID;
		
		private EntitySet<Word> _Words;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDictionaryIDChanging(int value);
    partial void OnDictionaryIDChanged();
    partial void OnDictionaryNameChanging(string value);
    partial void OnDictionaryNameChanged();
    partial void OnDateOfCreationChanging(System.DateTime value);
    partial void OnDateOfCreationChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Dictionary()
		{
			this._Words = new EntitySet<Word>(new Action<Word>(this.attach_Words), new Action<Word>(this.detach_Words));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictionaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DictionaryID
		{
			get
			{
				return this._DictionaryID;
			}
			set
			{
				if ((this._DictionaryID != value))
				{
					this.OnDictionaryIDChanging(value);
					this.SendPropertyChanging();
					this._DictionaryID = value;
					this.SendPropertyChanged("DictionaryID");
					this.OnDictionaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictionaryName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string DictionaryName
		{
			get
			{
				return this._DictionaryName;
			}
			set
			{
				if ((this._DictionaryName != value))
				{
					this.OnDictionaryNameChanging(value);
					this.SendPropertyChanging();
					this._DictionaryName = value;
					this.SendPropertyChanged("DictionaryName");
					this.OnDictionaryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreation", DbType="Date NOT NULL")]
		public System.DateTime DateOfCreation
		{
			get
			{
				return this._DateOfCreation;
			}
			set
			{
				if ((this._DateOfCreation != value))
				{
					this.OnDateOfCreationChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreation = value;
					this.SendPropertyChanged("DateOfCreation");
					this.OnDateOfCreationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dictionary_Word", Storage="_Words", ThisKey="DictionaryID", OtherKey="DictionaryID")]
		public EntitySet<Word> Words
		{
			get
			{
				return this._Words;
			}
			set
			{
				this._Words.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dictionary", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Dictionaries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Dictionaries.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.Dictionary = this;
		}
		
		private void detach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.Dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestID;
		
		private string _NameOfTest;
		
		private System.Nullable<System.DateTime> _DateOfTest;
		
		private System.Nullable<double> _PercentageOfCorrect;
		
		private System.Nullable<int> _Correct;
		
		private System.Nullable<int> _Inccorect;
		
		private System.Nullable<int> _NumberOfWordsTested;
		
		private int _UserID;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnNameOfTestChanging(string value);
    partial void OnNameOfTestChanged();
    partial void OnDateOfTestChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfTestChanged();
    partial void OnPercentageOfCorrectChanging(System.Nullable<double> value);
    partial void OnPercentageOfCorrectChanged();
    partial void OnCorrectChanging(System.Nullable<int> value);
    partial void OnCorrectChanged();
    partial void OnInccorectChanging(System.Nullable<int> value);
    partial void OnInccorectChanged();
    partial void OnNumberOfWordsTestedChanging(System.Nullable<int> value);
    partial void OnNumberOfWordsTestedChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Test()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfTest", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameOfTest
		{
			get
			{
				return this._NameOfTest;
			}
			set
			{
				if ((this._NameOfTest != value))
				{
					this.OnNameOfTestChanging(value);
					this.SendPropertyChanging();
					this._NameOfTest = value;
					this.SendPropertyChanged("NameOfTest");
					this.OnNameOfTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfTest", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfTest
		{
			get
			{
				return this._DateOfTest;
			}
			set
			{
				if ((this._DateOfTest != value))
				{
					this.OnDateOfTestChanging(value);
					this.SendPropertyChanging();
					this._DateOfTest = value;
					this.SendPropertyChanged("DateOfTest");
					this.OnDateOfTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageOfCorrect", DbType="Float")]
		public System.Nullable<double> PercentageOfCorrect
		{
			get
			{
				return this._PercentageOfCorrect;
			}
			set
			{
				if ((this._PercentageOfCorrect != value))
				{
					this.OnPercentageOfCorrectChanging(value);
					this.SendPropertyChanging();
					this._PercentageOfCorrect = value;
					this.SendPropertyChanged("PercentageOfCorrect");
					this.OnPercentageOfCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Int")]
		public System.Nullable<int> Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inccorect", DbType="Int")]
		public System.Nullable<int> Inccorect
		{
			get
			{
				return this._Inccorect;
			}
			set
			{
				if ((this._Inccorect != value))
				{
					this.OnInccorectChanging(value);
					this.SendPropertyChanging();
					this._Inccorect = value;
					this.SendPropertyChanged("Inccorect");
					this.OnInccorectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfWordsTested", DbType="Int")]
		public System.Nullable<int> NumberOfWordsTested
		{
			get
			{
				return this._NumberOfWordsTested;
			}
			set
			{
				if ((this._NumberOfWordsTested != value))
				{
					this.OnNumberOfWordsTestedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfWordsTested = value;
					this.SendPropertyChanged("NumberOfWordsTested");
					this.OnNumberOfWordsTestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Result", Storage="_Results", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Test", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Password;
		
		private System.DateTime _DateCreated;
		
		private string _Email;
		
		private EntitySet<Dictionary> _Dictionaries;
		
		private EntitySet<Test> _Tests;
		
		private EntitySet<Word> _Words;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._Dictionaries = new EntitySet<Dictionary>(new Action<Dictionary>(this.attach_Dictionaries), new Action<Dictionary>(this.detach_Dictionaries));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Words = new EntitySet<Word>(new Action<Word>(this.attach_Words), new Action<Word>(this.detach_Words));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="Date NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dictionary", Storage="_Dictionaries", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Dictionary> Dictionaries
		{
			get
			{
				return this._Dictionaries;
			}
			set
			{
				this._Dictionaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Test", Storage="_Tests", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Word", Storage="_Words", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Word> Words
		{
			get
			{
				return this._Words;
			}
			set
			{
				this._Words.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dictionaries(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Dictionaries(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Words(Word entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WordID;
		
		private bool _Correct;
		
		private int _TestID;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<Word> _Word;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWordIDChanging(int value);
    partial void OnWordIDChanged();
    partial void OnCorrectChanging(bool value);
    partial void OnCorrectChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    #endregion
		
		public Result()
		{
			this._Test = default(EntityRef<Test>);
			this._Word = default(EntityRef<Word>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordID", DbType="Int NOT NULL")]
		public int WordID
		{
			get
			{
				return this._WordID;
			}
			set
			{
				if ((this._WordID != value))
				{
					if (this._Word.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWordIDChanging(value);
					this.SendPropertyChanging();
					this._WordID = value;
					this.SendPropertyChanged("WordID");
					this.OnWordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Bit NOT NULL")]
		public bool Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Result", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Result", Storage="_Word", ThisKey="WordID", OtherKey="WordID", IsForeignKey=true)]
		public Word Word
		{
			get
			{
				return this._Word.Entity;
			}
			set
			{
				Word previousValue = this._Word.Entity;
				if (((previousValue != value) 
							|| (this._Word.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Word.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._WordID = value.WordID;
					}
					else
					{
						this._WordID = default(int);
					}
					this.SendPropertyChanged("Word");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngSrbPackage")]
	public partial class EngSrbPackage
	{
		
		private string _Word;
		
		private string _Meaning;
		
		public EngSrbPackage()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="NVarChar(255)")]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this._Word = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Meaning", DbType="NVarChar(255)")]
		public string Meaning
		{
			get
			{
				return this._Meaning;
			}
			set
			{
				if ((this._Meaning != value))
				{
					this._Meaning = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Words")]
	public partial class Word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WordID;
		
		private string _WordMain;
		
		private string _Pronouncement;
		
		private string _WordTranslated;
		
		private System.DateTime _DateOfInput;
		
		private int _Rating;
		
		private string _Description;
		
		private int _DictionaryID;
		
		private int _UserID;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Dictionary> _Dictionary;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWordIDChanging(int value);
    partial void OnWordIDChanged();
    partial void OnWordMainChanging(string value);
    partial void OnWordMainChanged();
    partial void OnPronouncementChanging(string value);
    partial void OnPronouncementChanged();
    partial void OnWordTranslatedChanging(string value);
    partial void OnWordTranslatedChanged();
    partial void OnDateOfInputChanging(System.DateTime value);
    partial void OnDateOfInputChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDictionaryIDChanging(int value);
    partial void OnDictionaryIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Word()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Dictionary = default(EntityRef<Dictionary>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WordID
		{
			get
			{
				return this._WordID;
			}
			set
			{
				if ((this._WordID != value))
				{
					this.OnWordIDChanging(value);
					this.SendPropertyChanging();
					this._WordID = value;
					this.SendPropertyChanged("WordID");
					this.OnWordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordMain", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WordMain
		{
			get
			{
				return this._WordMain;
			}
			set
			{
				if ((this._WordMain != value))
				{
					this.OnWordMainChanging(value);
					this.SendPropertyChanging();
					this._WordMain = value;
					this.SendPropertyChanged("WordMain");
					this.OnWordMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pronouncement", DbType="NVarChar(30)")]
		public string Pronouncement
		{
			get
			{
				return this._Pronouncement;
			}
			set
			{
				if ((this._Pronouncement != value))
				{
					this.OnPronouncementChanging(value);
					this.SendPropertyChanging();
					this._Pronouncement = value;
					this.SendPropertyChanged("Pronouncement");
					this.OnPronouncementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordTranslated", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WordTranslated
		{
			get
			{
				return this._WordTranslated;
			}
			set
			{
				if ((this._WordTranslated != value))
				{
					this.OnWordTranslatedChanging(value);
					this.SendPropertyChanging();
					this._WordTranslated = value;
					this.SendPropertyChanged("WordTranslated");
					this.OnWordTranslatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfInput", DbType="Date NOT NULL")]
		public System.DateTime DateOfInput
		{
			get
			{
				return this._DateOfInput;
			}
			set
			{
				if ((this._DateOfInput != value))
				{
					this.OnDateOfInputChanging(value);
					this.SendPropertyChanging();
					this._DateOfInput = value;
					this.SendPropertyChanged("DateOfInput");
					this.OnDateOfInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(80)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictionaryID", DbType="Int NOT NULL")]
		public int DictionaryID
		{
			get
			{
				return this._DictionaryID;
			}
			set
			{
				if ((this._DictionaryID != value))
				{
					if (this._Dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDictionaryIDChanging(value);
					this.SendPropertyChanging();
					this._DictionaryID = value;
					this.SendPropertyChanged("DictionaryID");
					this.OnDictionaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_Result", Storage="_Results", ThisKey="WordID", OtherKey="WordID")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dictionary_Word", Storage="_Dictionary", ThisKey="DictionaryID", OtherKey="DictionaryID", IsForeignKey=true)]
		public Dictionary Dictionary
		{
			get
			{
				return this._Dictionary.Entity;
			}
			set
			{
				Dictionary previousValue = this._Dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dictionary.Entity = null;
						previousValue.Words.Remove(this);
					}
					this._Dictionary.Entity = value;
					if ((value != null))
					{
						value.Words.Add(this);
						this._DictionaryID = value.DictionaryID;
					}
					else
					{
						this._DictionaryID = default(int);
					}
					this.SendPropertyChanged("Dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Word", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Words.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Words.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Word = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Word = null;
		}
	}
}
#pragma warning restore 1591
